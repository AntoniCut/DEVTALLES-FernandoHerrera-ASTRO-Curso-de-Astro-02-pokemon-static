---

//  -------------------------------------------------------
//  ----------  /02/pokemon-static/  ----------------------
//  ----------  /src/pages/pokemons/[name].astro  ---------
//  -------------------------------------------------------


import type { GetStaticPaths } from "astro";
import { Icon } from 'astro-icon/components';

import type { PokemonListResponse } from "@interfaces/pokemon-list.response";

import MainLayout from "@layouts/MainLayout.astro";
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import Title from "@components/shared/Title.astro";


//  -----  SSG  --  Static Site Generation  -----
export const getStaticPaths = ( async () => {

    const resp = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151');
    const { results } = await resp.json() as PokemonListResponse;
    //console.log("results => ", results);

    return results.map(({ name, url }) => ({
        params: { name },
        props: { name, url },
    }));

}) satisfies GetStaticPaths;


const { name } = Astro.params;
const { url } = Astro.props;
const id = url.split('/').at(-2);
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;


---


<MainLayout 
    title={`Pokemon - #${id} ${name}`}
    description={`Información sobre el pokémon ${name}`}
    image={imageSrc}
>        
    
    <section class="mt-10 mx-10 flex flex-col justify-center items-center">
        
        <div class="flex flex-row">

            <div>
                <button class="text-blue-500" onclick="history.back()" > Regresar </button>
                <Title> {name} </Title>
            </div>
    
            <button id="btnFavourite" class="ml-4 mt-8" data-name={name} data-id={id}> 
                <Icon data-outline name="heart-outline" size={50}/> 
                <Icon data-full class="hidden" name="heart-full" size={45}/> 
            </button>

        </div>
        
        
        <PokemonCard name={name} url={url} isBig />
        
        <audio controls class="mt-5" > 
            <source  src={audioSrc} type="audio/ogg" />
            Your Browser does not support the audio element.
        </audio>

    </section>
   
</MainLayout>


<script>

    interface FavoritePokemon {
        name: string;
        id: number;
    }


    //  ---------------------------------------------------------
    //  ----------  Ciclo de Vida del View Transition  ----------
    //  ---------------------------------------------------------
    
    //  -----  antes de la preparación  -----
    document.addEventListener('astro:before-preparation', () => {
        console.log('astro:before-preparation');
    });

    //  -----  despues de la preparación  -----
    document.addEventListener('astro:after-preparation', () => {
        console.log('astro:after-preparation');
    });

    //  -----  antes del cambio  -----
    document.addEventListener('astro:before-swap', () => {
        console.log('astro:before-swap');
    });

    //  -----  despues del cambio  -----
    document.addEventListener('astro:after-swap', () => {
        console.log('astro:after-swap');
    });

    //  -----  cuando script bloqueantes, estilos han sido cargados y con once: true solo se ejecuta una vez  -----
    document.addEventListener('astro:page-load', () => {
        console.log('astro:page-load')
    });  //  <==  dependencia once: true - solo se ejecuta una vez
    

    //  ------------------------------------------------------------
    
    //  -----  Botones Corazones  -----
    const handlerPageLoad = () => {

        let FavoritePokemons: FavoritePokemon[] = JSON.parse(  
            localStorage.getItem('favorites')  ?? '[]'
        );
        console.log('FavouritePokemon => ', FavoritePokemons)


        //  -----  referencias al HTML  -----
        const btnFavorite = document.querySelector('#btnFavourite') as HTMLButtonElement;
        const heartOutline = document.querySelector('[data-outline]') as HTMLElement;
        const heartFull = document.querySelector('[data-full]') as HTMLElement;
        //console.log(heartOutline);
        //console.log(heartFull);


        if(!btnFavorite) return;
        
        const name = btnFavorite.dataset.name ?? ''; 
        const id = btnFavorite.dataset.id ?? ''; 

        
        //  -----  Persistencia del Corazón - accedemos al localStorage  -----
        const isFavourite = FavoritePokemons.some( fav => fav.name === name);

        if( isFavourite ) {
            heartOutline.classList.add('hidden');
            heartFull.classList.remove('hidden');
        }




        const toggleFavourite = () => {

            //  -----  Persistencia del Corazón - accedemos al localStorage  -----
            const isFavourite = FavoritePokemons.some( fav => fav.name === name);

            //  Remover
            if( isFavourite) FavoritePokemons = FavoritePokemons.filter( fav => fav.name !== name);
            
            //  Agregar
            else {     
                FavoritePokemons.push({
                    id: +id,
                    name: name
                })
            }

            localStorage.setItem('favorites', JSON.stringify(FavoritePokemons));
        }
        

        //  -----  click en el corazón  -----
        btnFavorite.addEventListener('click', () => {
            
            console.log({ name, id });

            heartOutline.classList.toggle('hidden');
            heartFull.classList.toggle('hidden');

            toggleFavourite();
        });
    }


    document.addEventListener('astro:page-load', handlerPageLoad);

</script>


<style>
    
    a { @apply hover:underline text-blue-500; }

    #btnFavourite {
        @apply hover:animate-pulse
    }

</style>


<!--  

-----  Crea en tiempo de construcción argumentos dinámicos  -----

export const getStaticPaths = (() => {
    
    return [
        {
            params: { name: "bulbasaur" },
            props: {
                name: "bulbasaur",
                url: "https://pokeapi.co/api/v2/pokemon/1/",
            },
        },

        {
            params: { name: "ivysaur" },
            props: {
                name: "ivysaur",
                url: "https://pokeapi.co/api/v2/pokemon/2/",
            },
        },
        {
            params: { name: "venusaur" },
            props: {
                name: "venusaur",
                url: "https://pokeapi.co/api/v2/pokemon/3/",
            },
        },
        {
            params: { name: "charmander" },
            props: {
                name: "charmander",
                url: "https://pokeapi.co/api/v2/pokemon/4/",
            },
        },
        {
            params: { name: "charmeleon" },
            props: {
                name: "charmeleon",
                url: "https://pokeapi.co/api/v2/pokemon/5/",
            },
        },
        {
            params: { name: "charizard" },
            props: {
                name: "charizard",
                url: "https://pokeapi.co/api/v2/pokemon/6/",
            },
        },
        {
            params: { name: "squirtle" },
            props: {
                name: "squirtle",
                url: "https://pokeapi.co/api/v2/pokemon/7/",
            },
        },
        {
            params: { name: "wartortle" },
            props: {
                name: "wartortle",
                url: "https://pokeapi.co/api/v2/pokemon/8/",
            },
        },
        {
            params: { name: "blastoise" },
            props: {
                name: "blastoise",
                url: "https://pokeapi.co/api/v2/pokemon/9/",
            },
        },
        {
            params: { name: "caterpie" },
            props: {
                name: "caterpie",
                url: "https://pokeapi.co/api/v2/pokemon/10/",
            },
        },
        {
            params: { name: "metapod" },
            props: {
                name: "metapod",
                url: "https://pokeapi.co/api/v2/pokemon/11/",
            },
        },
        {
            params: { name: "butterfree" },
            props: {
                name: "butterfree",
                url: "https://pokeapi.co/api/v2/pokemon/12/",
            },
        },
        {
            params: { name: "weedle" },
            props: {
                name: "weedle",
                url: "https://pokeapi.co/api/v2/pokemon/13/",
            },
        },
        {
            params: { name: "kakuna" },
            props: {
                name: "kakuna",
                url: "https://pokeapi.co/api/v2/pokemon/14/",
            },
        },
        {
            params: { name: "beedrill" },
            props: {
                name: "beedrill",
                url: "https://pokeapi.co/api/v2/pokemon/15/",
            },
        },
        {
            params: { name: "pidgey" },
            props: {
                name: "pidgey",
                url: "https://pokeapi.co/api/v2/pokemon/16/",
            },
        },
        {
            params: { name: "pidgeotto" },
            props: {
                name: "pidgeotto",
                url: "https://pokeapi.co/api/v2/pokemon/17/",
            },
        },
        {
            params: { name: "pidgeot" },
            props: {
                name: "pidgeot",
                url: "https://pokeapi.co/api/v2/pokemon/18/",
            },
        },
        {
            params: { name: "rattata" },
            props: {
                name: "rattata",
                url: "https://pokeapi.co/api/v2/pokemon/19/",
            },
        },
        {
            params: { name: "raticate" },
            props: {
                name: "raticate",
                url: "https://pokeapi.co/api/v2/pokemon/20/",
            },
        },
    ];
}) satisfies GetStaticPaths;


-->